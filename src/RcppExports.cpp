// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// force_bundle_iter
List force_bundle_iter(NumericMatrix edges_xy, List elist, double K, int C, int P, int P_rate, double S, int I, double I_rate, double compatibility_threshold, double eps);
RcppExport SEXP _edgebundle_force_bundle_iter(SEXP edges_xySEXP, SEXP elistSEXP, SEXP KSEXP, SEXP CSEXP, SEXP PSEXP, SEXP P_rateSEXP, SEXP SSEXP, SEXP ISEXP, SEXP I_rateSEXP, SEXP compatibility_thresholdSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type edges_xy(edges_xySEXP);
    Rcpp::traits::input_parameter< List >::type elist(elistSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type P_rate(P_rateSEXP);
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< double >::type I_rate(I_rateSEXP);
    Rcpp::traits::input_parameter< double >::type compatibility_threshold(compatibility_thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(force_bundle_iter(edges_xy, elist, K, C, P, P_rate, S, I, I_rate, compatibility_threshold, eps));
    return rcpp_result_gen;
END_RCPP
}
// criterion_angular_resolution
double criterion_angular_resolution(List adj, NumericMatrix xy);
RcppExport SEXP _edgebundle_criterion_angular_resolution(SEXP adjSEXP, SEXP xySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type xy(xySEXP);
    rcpp_result_gen = Rcpp::wrap(criterion_angular_resolution(adj, xy));
    return rcpp_result_gen;
END_RCPP
}
// criterion_edge_length
double criterion_edge_length(IntegerMatrix el, NumericMatrix xy, double lg);
RcppExport SEXP _edgebundle_criterion_edge_length(SEXP elSEXP, SEXP xySEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type xy(xySEXP);
    Rcpp::traits::input_parameter< double >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(criterion_edge_length(el, xy, lg));
    return rcpp_result_gen;
END_RCPP
}
// criterion_balanced_edge_length
double criterion_balanced_edge_length(List adj_deg2, NumericMatrix xy);
RcppExport SEXP _edgebundle_criterion_balanced_edge_length(SEXP adj_deg2SEXP, SEXP xySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type adj_deg2(adj_deg2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type xy(xySEXP);
    rcpp_result_gen = Rcpp::wrap(criterion_balanced_edge_length(adj_deg2, xy));
    return rcpp_result_gen;
END_RCPP
}
// criterion_line_straightness
double criterion_line_straightness();
RcppExport SEXP _edgebundle_criterion_line_straightness() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(criterion_line_straightness());
    return rcpp_result_gen;
END_RCPP
}
// criterion_octilinearity
double criterion_octilinearity(IntegerMatrix el, NumericMatrix xy);
RcppExport SEXP _edgebundle_criterion_octilinearity(SEXP elSEXP, SEXP xySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type xy(xySEXP);
    rcpp_result_gen = Rcpp::wrap(criterion_octilinearity(el, xy));
    return rcpp_result_gen;
END_RCPP
}
// layout_as_metro_iter
NumericMatrix layout_as_metro_iter(List adj, IntegerMatrix el, List adj_deg2, NumericMatrix xy, NumericMatrix bbox, double l, double gr, NumericVector w, double bsize);
RcppExport SEXP _edgebundle_layout_as_metro_iter(SEXP adjSEXP, SEXP elSEXP, SEXP adj_deg2SEXP, SEXP xySEXP, SEXP bboxSEXP, SEXP lSEXP, SEXP grSEXP, SEXP wSEXP, SEXP bsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    Rcpp::traits::input_parameter< List >::type adj_deg2(adj_deg2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type xy(xySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type bbox(bboxSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type gr(grSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type bsize(bsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(layout_as_metro_iter(adj, el, adj_deg2, xy, bbox, l, gr, w, bsize));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_edgebundle_force_bundle_iter", (DL_FUNC) &_edgebundle_force_bundle_iter, 11},
    {"_edgebundle_criterion_angular_resolution", (DL_FUNC) &_edgebundle_criterion_angular_resolution, 2},
    {"_edgebundle_criterion_edge_length", (DL_FUNC) &_edgebundle_criterion_edge_length, 3},
    {"_edgebundle_criterion_balanced_edge_length", (DL_FUNC) &_edgebundle_criterion_balanced_edge_length, 2},
    {"_edgebundle_criterion_line_straightness", (DL_FUNC) &_edgebundle_criterion_line_straightness, 0},
    {"_edgebundle_criterion_octilinearity", (DL_FUNC) &_edgebundle_criterion_octilinearity, 2},
    {"_edgebundle_layout_as_metro_iter", (DL_FUNC) &_edgebundle_layout_as_metro_iter, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_edgebundle(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
